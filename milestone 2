def find_splice(dna_motif, dna):
    index = [] # beginnning list that will return later
    m = 0 #what use to advance dna after finding motif
    for i in range (0,len(dna)):
        if dna[i] == dna_motif[m]:
            index.append(i)
            m += 1 # when find first index, check for second letter in rest of dna string
        if len(index) == len(dna_motif): # once do all of dna_motif, stop
            break
    return index
#test1 = find_splice("GTA", "ACGACATCACGTGACG")
#result1 = [2, 6, 8]
#print(test1 == result1)


def inall(string, dlist): # use this funct. to see if dna_string is in all of the dnas in the list
    check = 0
    true = True
    false = False
    for i in range (0,len(dlist)):
        if string in dlist[i]:
            check += 1
    if check == len(dlist):
        return true
    else: 
        return false
def shared_motif(dna_list):
    motif = '' # initializing values
    m = 0
    n = 1
    for i in range (0,len(dna_list)*len(dna_list[0])): # stopping point at max
        dna_string = dna_list[0][m:n] # creating string from first item in list with index m to n
        if inall(dna_string, dna_list) == True: # checking if string is in all items
            if len(dna_string) > len(motif): # checking if new motif is bigger than current motif
                motif = dna_string # setting new motif equal to current string if bigger
            if n < len(dna_list[0]): # checking that n isnt entire list
                n += 1 # moving up index
        elif inall(dna_string, dna_list) == False: # if string isnt in items,
            m += 1 # first letter of string index moves up one
            n = m + 1
    return motif
#test = shared_motif(["ATATACA", "ATACAGA", "GGTATACA"])
#result = 'ATACA'
#print(test == result)

def perfect_match(rna):
    A = rna.count('A') # counting the number of each symbol and assigning to corresponding variable
    U = rna.count('U')
    G = rna.count('G')
    C = rna.count('C')
    matches = 0 # initializing values
    if A == U and G == C: #checking if a perfect match is possible from equal number of corresponding symbols
        import math
        matches = math.factorial(A) * math.factorial(C) # calculating number of mathces; combos of u and a times combos of c and g
    else:
        matches = 0 # if unequal number of corresponding variables, no perfect match possible
    return matches
#test = perfect_match("CACUAGUGCGAU")
#result = 36
#print(test == result)


def reverse_complement(dna):
    reverse = dna[::-1] # reversing dna string
    rna = ''
    for symbol in reverse:
        if symbol == 'A': #changing dna symbol to corresponding rna symbol
            rna = rna + 'T'
        elif symbol == 'C':
            rna = rna + 'G'
        elif symbol == 'T':
            rna = rna + 'A'
        elif symbol == 'G':
            rna = rna + 'C'
    return rna
def reverse_palindrome(dna):
    tuples = []
    m = 0
    n = 1
    for i in range (0, len(dna)**2): # stopping point at max
        dna_string = dna[m:n] # creating string from dna in list with index m to n
        if dna_string == reverse_complement(dna_string): # checking if string is reverse palindrome
            if len(dna_string) > 3 and 12 > len(dna_string): # making sure length from 3 to 12
                tuples.append((m,len(dna_string))) # adds new tuple to list
        if n == len(dna): # once string is full length of dna,
            m += 1 # move up first letter and start process over
            n = m + 1
        n += 1 # increasing length of string by one
    return tuples
#test = reverse_palindrome("AACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC")
#result = [(8, 4), (25, 4)] 
#print(test == result)

def assemble_genome(dna_list):
    superstr = ''
    for i in range (0,len(dna_list)):
        superstr = superstr + dna_list[i]
    first = dna_list[0]
    for t in range (i + 1,len(dna_list)):
        for x in range (1,len(dna_list[i])):
            if first[-x:len(first)] == dna_list[t][0:x]:
                   #print(dna_list[i][-x] + dna_list[t][0:x])
                   superpos = first[:-x] + dna_list[t]
            if len(superpos) < len(superstr):
                superstr = superpos
                print(superstr)
    first = superstr
    return superstr
#works for 2 items in dna_list methinks
test = assemble_genome(["tupperware","areyouthere","error"])
#print('tupperware'[-3:len('tupperware')])
print(test)

def random_genome(dna,gc_content):
    import math # the BEST library
    dna.upper() # string dna --> upper case
    result = [] # start the function with an empty list - an empty bucket to put our outputs
    L = len(dna) # length of string dna
    k = 0 # a good starting place
    for i in dna: # counts the numbers of (A's or T's) in string 'dna'
        if (i=="A") or (i=="T"):
            k+=1
    def f_CG(x): # pre-defined probability function implemented into python
        return x/2
    def f_AT(x): # pre-defined probability function implemented into python
        return (1-x)/2
    for v in gc_content:
        P = f_AT(v)**k * f_CG(v)**(L-k) # multiplies the probabilities of 'k' (A's or T's) and 'L-k' (G's or C's), based on the pre-defined probability functions; stores as variable 'P'
        logP = math.log(P,10) # stores the log-base-10 of each value in list 'P'
        result.append(logP) # for every entry in gc_content, we append the log-base-10 of the probability calculation to the empty string, essentially loading the empty bucket we defined earlier
    return result # yee haw
